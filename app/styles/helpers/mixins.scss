// Width / height
@mixin size($width, $height: $width) {
	width: $width;
	height: $height;
}

// absoluteCenter
@mixin absoluteCenter($direction : "left") {
	position: absolute;
	@if $direction == "left"{
		left: 50%;
		transform: translateX(-50%);
	}
	@if $direction == "top"{
		top: 50%;
		transform: translateY(-50%);
	}
	@if $direction == "both"{
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
	}
}

@mixin absoluteFull() {
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
}


@mixin maxWidth($breakpoint){
	@media screen and (max-width:$breakpoint){
		@content;
	}	
}

@mixin minWidth($breakpoint){
	@media screen and (min-width:$breakpoint){
		@content;
	}	
}

// Flex Box 
@mixin flexBox( 
	$align-items: stretch,
	$justify-content: flex-start,
	$direction:row , $flex: flex,
	$wrap: nowrap)
{
	display: flex;
	align-items: $align-items;
	justify-content: $justify-content;
	flex-direction: $direction;
	flex-wrap: $wrap;
}


@mixin hideCroll(){
	-ms-overflow-style: none;
	scrollbar-width: none;
	&::-webkit-scrollbar{
		display: none;
	}
}


// text clamp
@mixin textclamp($row: 1, $size: 100%){
	display: -webkit-box;
	-webkit-line-clamp: $row;
	-webkit-box-orient: vertical;
	overflow: hidden;
	text-overflow: ellipsis;
	width: $size;
	max-width: $size;
	white-space: pre-wrap;
	word-break: break-word;
}


@mixin hoverEffect($itemClass, $contentClass){
	#{$itemClass} {
		position: relative;
		z-index: 1;
		transition: transform 0.25s linear ;
		#{$contentClass}{
			@include absoluteFull();
			@include flexBox(center, center, column );
			opacity: 0;
			visibility: hidden;
			transition: all 0.25s linear;
			background:	linear-gradient(
				to bottom, 
				rgba($primary-color, 0.8),
				rgba( $secondary-color, 0.9)
			);
			z-index: 2;
		}

		&:after{
			content:"";
			@include absoluteFull();
			background-color: $third-color;
			z-index: -1;
			transition: transform 0.25s linear;
		}
		&:hover{
			transform: translate(-1rem,-1rem);
			
			#{$contentClass}
			{
				opacity: 1;
				visibility: visible;
			}
			&:after{
				transform: translate(1rem,1rem);
			}
		}
	}
}
